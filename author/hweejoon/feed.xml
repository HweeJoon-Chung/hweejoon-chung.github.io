<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://hweejoon-chung.github.io/author/hweejoon/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://hweejoon-chung.github.io/" rel="alternate" type="text/html" />
  <updated>2022-10-03T19:58:13+09:00</updated>
  <id>https://hweejoon-chung.github.io/author/hweejoon/feed.xml</id>

  
  
  

  
    <title type="html">HWEE JOON’s Persona | </title>
  

  
    <subtitle>CHUNG HWEE JOON&apos;s Personal Blog</subtitle>
  

  
    <author>
        <name>Chung Hwee Joon</name>
      
      
    </author>
  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">소논문 관련연구</title>
      <link href="https://hweejoon-chung.github.io/eerelatedstudies-paper" rel="alternate" type="text/html" title="소논문 관련연구" />
      <published>2022-09-30T19:19:00+09:00</published>
      <updated>2022-09-30T19:19:00+09:00</updated>
      <id>https://hweejoon-chung.github.io/eerelatedstudies-paper</id>
      <content type="html" xml:base="https://hweejoon-chung.github.io/eerelatedstudies-paper">&lt;hr /&gt;
&lt;h1 id=&quot;소논문-관련연구-related-studies-of-extended-essay&quot;&gt;소논문 관련연구 (Related Studies of Extended Essay)&lt;/h1&gt;

&lt;h2 id=&quot;참고-일정&quot;&gt;참고 일정&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ul class=&quot;task-list&quot;&gt;
    &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;~ 2022년 8월 29일 : 소논문 제안서 제출 마감&lt;/li&gt;
    &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;9월 중 : 지도교사 배정 - &lt;strong&gt;첫번째 필수성찰세션 (1st mandatory reflection session)&lt;/strong&gt;&lt;/li&gt;
    &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;11월 말 : 소논문 1,000단어 분량 작성&lt;/li&gt;
    &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;12월 말 : 소논문 2,000단어 분량 작성 - &lt;strong&gt;두번째 필수성찰세션 (2nd mandatory reflection session)&lt;/strong&gt;&lt;/li&gt;
    &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;2023년 3월 중순 : 소논문 3,000단어 분량 작성&lt;/li&gt;
    &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;2023년 5월 중순 : 소논문 4,000단어 분량 작성&lt;/li&gt;
    &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;2023년 5월 31일 : 소논문 최종본 제출 마감 - &lt;strong&gt;마지막 필수성찰세션(viva voce: final mandatory reflection session)&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;관련 문의 : 소논문 코디네이터 (064-786-5577, &lt;a href=&quot;mailto:hatsal@korea.kr&quot;&gt;hatsal@korea.kr&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;관련-연구논문-related-studiespapers-분석요약&quot;&gt;관련 연구/논문 (Related Studies/Papers) 분석요약&lt;/h2&gt;

&lt;h4 id=&quot;게임-소프트웨어의-품질-평가-모델&quot;&gt;게임 소프트웨어의 품질 평가 모델&lt;/h4&gt;

&lt;p&gt;정혜정한국인터넷정보학회인터넷정보학회논문지8(6)pp.115~1252007.12컴퓨터학&lt;/p&gt;

&lt;p&gt;“효율성에 대한 평가에서 규정된 조건에서 사용되는 자원의 양에 따라 요구된 성능을 제공하는 소프트웨어의 능력을 말하는 것으로 사용자 관점에서 가장 많은 요구사항으로 조사된 것은 로딩시간에 대한 것으로 시간효율성 문제였다.”“게임을 하는데 있어서 사용자 요구사항이 가장 많은 부분이 효율성으로 조사되었다.”&lt;/p&gt;

&lt;h4 id=&quot;observer패턴을-적용한mmorpg파티-시스템-아이템-배분-방법&quot;&gt;Observer패턴을 적용한MMORPG파티 시스템 아이템 배분 방법&lt;/h4&gt;

&lt;p&gt;김태석김신환김종수한국멀티미디어학회멀티미디어학회논문지10(8)pp.1060~10672007.08전자/정보통신공학&lt;/p&gt;

&lt;p&gt;“대규모의 게임을 만들 때 객체지향개념을 충분히 활용할 수 있는 설계기법이 유용하다.”&lt;/p&gt;

&lt;h4 id=&quot;인공지능캐릭터의-효율적인-메모리에-관한-연구&quot;&gt;인공지능캐릭터의 효율적인 메모리에 관한 연구&lt;/h4&gt;

&lt;p&gt;차명희(사)한국컴퓨터게임학회한국컴퓨터게임학회논문지(14)pp.224~2302008.09기타공학일반&lt;/p&gt;

&lt;p&gt;“방대한 양의 가상 환경에 존재하는 오브젝트 정보를 받아들여 저장해야 한다.”“한 화면에서 기억해야 할 정보가 너무 많아서 시각으로 인지한 모든 정보를 처리한다는 것은 불가능하다. 또한 자원의 효율적인 사용 측면에서도 매우 불필요한 일이다.”“정보의 효율적인 인지와 저장을 위한 인간과 유사한 인지 방식”“새로운 환경을 인지한 에이전트가 자신의 메모리에 정보를 저장한 후 지능적으로 대응”&lt;/p&gt;

&lt;h4 id=&quot;동적-xml-조각-스트림에-대한-메모리-효율적-질의-처리&quot;&gt;동적 XML 조각 스트림에 대한 메모리 효율적 질의 처리&lt;/h4&gt;

&lt;p&gt;이상욱김진강현철한국정보처리학회정보처리학회논문지D15(1)pp.1~142008.02공학&lt;/p&gt;

&lt;p&gt;“조각정보삭제 기법”“자식수 세기는 주어진 조각의 자식 조각들이 정적일 때 자식 조각이 모두 도착하였는지 확인하여 모두 도착하였다면 해당 조각에 대한 질의 처리가 종료됨과 동시에 조각 정보를 삭제”“중복된 조건 값 제거는 중복된 조각 정보를 삭제하는 기법”&lt;/p&gt;

&lt;h4 id=&quot;메모리가-제한적인-자바가상기계에서의지역-재사용&quot;&gt;메모리가 제한적인 자바가상기계에서의지역 재사용&lt;/h4&gt;

&lt;p&gt;김태인김성건한환수한국정보과학회정보과학회논문지 : 소프트웨어 및 응용34(6)pp.562~5712007.06컴퓨터학&lt;/p&gt;

&lt;p&gt;아래 사항 수정하여 반영가능
고성능, 고화질의 단말에서 동작하는 게임 어플리케이션 역시 고화질의 이미지를 포함하는 등 점점 중량화 되는 추세를 보이고 있다. 하지만 게임 플랫폼의 경우, 이미지 관련 자원들에 대한 메모리 사용에 제약이 크기 때문에 이러한 제약 사항 내에서 반응 속도 등 게임 어플리케이션의 질을 높일 수 있는 효과적인 메모리 관리 및 활용 기법이 필요시 된다. 본 논문에서는 이를 위해 게임 플랫폼 상의 메모리 제약과 관련 된 문제점을 분석하고, 이러한 문제점을 고려하여 게임 어플리케이션 내에서 가장 효과적으로 이미지 관련 자원들을 처리하고 개발할 수 있는 메모리 관리 기법을 제시하였다. 이러한 기법을 통해 제한 된 메모리상에서 고화질의 이미지 자원 등을 효과적으로 다룰 수 있었고, 어플리케이션의 반응 속도 역시 효과적으로 높일 수 있었다&lt;/p&gt;

&lt;h4 id=&quot;directx를-이용한-게임-설계에서의-생성-패턴-적용-기법&quot;&gt;DirectX를 이용한 게임 설계에서의 생성 패턴 적용 기법&lt;/h4&gt;

&lt;p&gt;김종수김태석한국멀티미디어학회멀티미디어학회논문지8(4)pp.11~112005.04전자/정보통신공학학술저널&lt;/p&gt;

&lt;p&gt;adapter 패턴은 각 클래스가 부모 클래스를 상속 받아 필요한 부분만 재정의하면 된다. 새로운 클래스가 정의하고 있지 않은 속성과 메서드를 코드를 수정하지 않고 쓸 수 있다
factory 패턴은 adapter 패턴 생성에 쓰일 때 객체 간의 응집도를 높이고 복잡도를 줄인다싱글톤 패턴은 인스턴스가 필요한 객체에 필요한 곳마다 매개변수를 전달하게 한다&lt;/p&gt;

&lt;h4 id=&quot;객체지향-이론을-적용한-멀티미디어-데이터-처리multimedia-data-processing-using-object---orient-theory&quot;&gt;객체지향 이론을 적용한 멀티미디어 데이터 처리Multimedia data processing using object - orient theory&lt;/h4&gt;

&lt;p&gt;김홍섭한국컴퓨터정보학회한국컴퓨터정보학회논문지한국OA학회 논문지 제5권 제2호2000.06 / 1 - 6 (6 pages)&lt;/p&gt;

&lt;p&gt;인터넷이 확장되고 멀티미디어의 통합 기술이 발전함에 따라 다양한 방식으로 정보를 표현하고 제공함으로써 컴퓨터 사용자들은 다양한 형태의 데이터를 접하게 된다. 개발자의 관점에서 볼 때 데이터의 처리는 여러 가지 문제를 야기할 수 있다. 사운드, 이미지, 영상 등 다양한 매체와, 같은 매체라도 서로 다른 자료구조로 인한 상호 호환성 문제는 개발자에게 더 많은 작업을 필요로 한다. 최근 대두되고 있는 객체지향 개발방법론은 이런 문제를 효율적이고 효과적으로 해결할 수 있는 기반을 제시한다. 본 고에서는 객체지향 이론의 핵심개념인 상속성과 다형성을 적용하여 효과적으로 멀티미디어 데이터를 처리하는 방법을 제시하고 게임 프로그램 개발에 적용한 그 구현 예를 제안하였다.: 수정하여 논문 작성시 참고&lt;/p&gt;

&lt;h4 id=&quot;java-기반-플랫폼-성능향상을-위한-모바일-게임-개발방법론mobile-game-coding-method-for-improving-performance-of-java-based-platform&quot;&gt;Java 기반 플랫폼 성능향상을 위한 모바일 게임 개발방법론Mobile Game Coding Method for Improving Performance of Java-based Platform&lt;/h4&gt;

&lt;p&gt;김혜정 ,  남진우 ,  문형석 ,  송범휘 ,  이학준 ,  홍영화 ,  주문원 ,  최영미 ,  진성아한국멀티미디어학회한국멀티미디어학회 학술발표논문집2006년도 추계학술발표논문집2006.11 / 797 - 800 (4 pages)학술대회자료&lt;/p&gt;

&lt;p&gt;메모리 로딩 시 꼭 필요한 부분만 로딩하고 여유를 남겨둬야 한다. 초보자들의 프로그래밍 실수 중 하나는 리소스를 초기에 로딩하는 것이다. 코딩 패턴을 변경하고 약간의 최적화를 해주면 게임의 성능은 많은 차이가 난다.&lt;/p&gt;

&lt;h4 id=&quot;기획자를-위한-객체지향적-게임시스템-기획-방법&quot;&gt;기획자를 위한 객체지향적 게임시스템 기획 방법&lt;/h4&gt;

&lt;p&gt;장희동한국게임학회한국게임학회 논문지16(3)pp.17~262016.06학제간연구&lt;/p&gt;

&lt;p&gt;대부분의 프로그래머들은 객체 지향적 프로그래밍이 효용성이 있다고 하지만 시간적 문제 때문에 현실적으로 어렵다고 한다&lt;/p&gt;

&lt;h4 id=&quot;안드로이드-디바이스-최적화를-위한-gof-디자인-패턴-적용-방법에-대한-연구&quot;&gt;안드로이드 디바이스 최적화를 위한 GOF 디자인 패턴 적용 방법에 대한 연구&lt;/h4&gt;

&lt;p&gt;정우철전문석최도현한국인터넷방송통신학회한국인터넷방송통신학회 논문지17(1)pp.89~972017.02&lt;/p&gt;

&lt;p&gt;객체지향 프로그래밍은 낮은 결합도와 높은 응집도를 가지고 있다. 결합도가 낮다는 뜻은 한 부분이 변경되었을 때 다른 부분도 변해야할 필요가 적다는 것, 응집도가 높다는 것은 한 요소가 한 목적을 이루기 위한 기능들을 모아서 구현되는 것이다. 즉, 유지 보수성이 높다.GoF의 패턴들 중 객체의 생성과 관련된 패턴들은 인스턴스를 만드는 과 정을 추상화한 것이다. 생성 패턴을 이용함으로써, 객체를 생성, 합성하는 방법이나 객체의 표현 방법에 독립적으로 시스템을 개발할 수 있게 해 준 다. 이러한 목적을 위해 상속을 이용하여 인스턴스를 생성하는 방법을 다양 화할 수도 있고, 인스턴스 생성을 다른 클래스에게 위임하기도 한다추상 팩토리인 AbstractMapFactory가 맵에서 필요한 모든 객체를 생성하기 때문에 한번에 변경이 가능하다는 장점이 있다.구현이 불필요한 여분의 코드에 종속될 필요성을 없애준다.GameServer 클래스를 Singleton으로 만들므로 해서 유일하게 존재하는 인스턴스가 되고, 다른 클래스의 객체 생성을 통제할 수 있다. 또한 전역 변 수를 사용해서 변수 영역이 혼란스러워지지 않게 한다. 그리고 전역변수를 사용하는데 있어서 발생하는 디버깅의 어려움 등의 문제를 해결해 주고, 인 스턴스의 개수를 변경하기가 쉽다는 장점이 있다.&lt;/p&gt;

&lt;h4 id=&quot;bullet-물리엔진을-이용한-게임용-다중-강체-캐릭터-설계-및-성능-프로파일링&quot;&gt;Bullet 물리엔진을 이용한 게임용 다중 강체 캐릭터 설계 및 성능 프로파일링&lt;/h4&gt;

&lt;p&gt;김영식(사)한국컴퓨터게임학회한국컴퓨터게임학회논문지29(2)pp.37~452016.06기타공학일반&lt;/p&gt;

&lt;p&gt;:성능프로파일링 시 작성 과정 참조 가능
성능 프로파일링에서는 윈도우 리소스 모니터(Windows resource monitor)를 사용해 수행시간과 메모리 사용량을 비교했다.&lt;/p&gt;

&lt;h4 id=&quot;한국-게임의-역사에-관한-연구&quot;&gt;한국 게임의 역사에 관한 연구&lt;/h4&gt;

&lt;p&gt;윤형섭권용만(사)한국컴퓨터게임학회한국컴퓨터게임학회논문지26(1)pp.107~1132013.03기타공학일반&lt;/p&gt;

&lt;p&gt;연관이 없어 보임&lt;/p&gt;

&lt;h4 id=&quot;게임-소프트웨어-재미요소의-체계적인-분류와-탐색방법&quot;&gt;게임 소프트웨어 재미요소의 체계적인 분류와 탐색방법&lt;/h4&gt;

&lt;p&gt;이승훈김세규류성열한국멀티미디어학회멀티미디어학회논문지13(10)pp.1506~15132010.10전자/정보통신공학&lt;/p&gt;

&lt;p&gt;재미요소의 분류 - 경쟁 : 세부목표 성취, 목표 준비에 대한 기대, 목표완료 성취, 목표 수행규칙 준수, 친밀감, 사회적 교류, 정서적 유대감, 지적 성취감, 기술 성장 성취감, 시간투자 보상감. 모의 : 역할 체험감, 대리 만족감, 자기 표현감, 행동의 현실일치감, 물리적 일체감, 조작 편리감, 실제 공간감, 타격 체험감, 일탈경험 체험, 환상, 몰입, 극적 상황 체험, 감정이입. 기회 : 새로운 추가 요소에 대한 기대감, 지속적 탐험, 창조, 상상력, 보상에 대한 기대, 예측 불가한 진행, 기발한 아이디어, 탐험현기증 : 다양한 공간 체험, 새로운 환경의 체험, 시각적 최적화, 실제 공간감, 위험의 스릴&lt;/p&gt;

&lt;h4 id=&quot;게임개발-전략-수립을-위한-게임만족도-평가시스템-모형-개발에-관한-연구&quot;&gt;게임개발 전략 수립을 위한 게임만족도 평가시스템 모형 개발에 관한 연구&lt;/h4&gt;

&lt;p&gt;함형범이양선안창호한국멀티미디어학회멀티미디어학회논문지7(11)pp.15~152004.11전자/정보통신공학&lt;/p&gt;

&lt;p&gt;게임 구성 요소는 동영상, 분위기, 사운드, 목표 설정, 그래픽, 시나리오, 접근성, 속도 순으로 중요도가 높게 나왔다. 장르는 시뮬레이션, RPG, 아케이드, 어드벤처, 온라인 순으로 만족도가 높았다.&lt;/p&gt;

&lt;h4 id=&quot;3차원-공간-상에서-space-syntax를-이용한-게임-객체-배치-연구&quot;&gt;3차원 공간 상에서 Space Syntax를 이용한 게임 객체 배치 연구&lt;/h4&gt;

&lt;p&gt;최승관김동현김영욱한국게임학회한국게임학회 논문지12(5)pp.43~552012.10학제간연구&lt;/p&gt;

&lt;p&gt;전체 공간을 나눠 단위 공간을 만들고 객체와 단위 공간의 관계에 대한 가이드라인을 제공해 플레이어가 객체와 단위 공간을 특정 목적에 맞게 사용할 수 있도록 함&lt;/p&gt;

&lt;h4 id=&quot;객체지향-소프트웨어-공학-기법을-이용한-리듬-게임의-개발&quot;&gt;객체지향 소프트웨어 공학 기법을 이용한 리듬 게임의 개발&lt;/h4&gt;

&lt;p&gt;오영석임준석황성운한국인터넷방송통신학회한국인터넷방송통신학회 논문지8(4)pp.105~1102008.08&lt;/p&gt;

&lt;p&gt;각 클래스는 전부 다른 기능을 가진다.&lt;/p&gt;

&lt;h4 id=&quot;디자인-패턴을-적용한-네트워크-게임의-db-관리-apis-설계&quot;&gt;디자인 패턴을 적용한 네트워크 게임의 DB 관리 APIs 설계&lt;/h4&gt;

&lt;p&gt;김종수김태석권오준한국멀티미디어학회멀티미디어학회논문지9(1)pp.101~1082006.01전자/정보통신공학&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DB 관리 클래스의 싱글톤 패턴 적용은 응집도를 높일 수 있다. 또한 퍼사드로 설계된 객체의 생성을 자신의 클래스가 담당하게 하는 것이 유지 보수 측면에서도 여러모로 편리하다. 싱글톤(Singleton)은 인 스턴스가 유일함을 보장함으로써, 메모리를 효율적 으로 사용할 수 있었다.&lt;/td&gt;
      &lt;td&gt;DirectPlay를 사용하여 구현된 간단한 클라이언트 와 서버의 통신을 테스트하기 위한 애플리케이션 구 현에 커맨트 패턴이 적용되었다. 행위패턴 영역의 커 맨드(Command) 패턴은 상속 기법을 이용하여 오퍼 레이션 수행과 구현객체를 분리하는 방법을 제공하 여, 분산작업이 가능하였다.&lt;/td&gt;
      &lt;td&gt;다수의 사용자가 데이터베이스에 동시에 접속하 는데 있어서 부하를 감소시키기 위해 커넥션 풀 API 의 구현이 검토되었다. 커넥션 풀 API의 구현은 메모 리를 절약시켜주고 액세스 시간을 감소시켜 준다는 효과가 있었고, 커넥션 풀 API의 구현에 싱글톤이 효율적으로 적용되었다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;공간-게임에서-적을-식별하기-위한-스카이라인-기반의-탐색-기법&quot;&gt;공간 게임에서 적을 식별하기 위한 스카이라인 기반의 탐색 기법&lt;/h4&gt;

&lt;p&gt;김성완조양현김종완(사)한국컴퓨터게임학회한국컴퓨터게임학회논문지25(4)pp.227~2332012.12기타공학일반&lt;/p&gt;

&lt;p&gt;실험결과에서 보는 것과 같이 거리만을 대상으로 한 NN에 비해 스카이라인을 이용한 SSG는 비교횟수와 평균적인 위험도에서 모두 낮은 값을 나타내었다. 이는 공간 게임에서 NN을 이용하여 거리만 측정하는 기법보다 SSG 기법이 상대 객체를 탐색하고 게임에 적용하기에 더 적절 하다는 것을 의미한다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Hwee Joon Chung</name>
        
        
      </author>

      

      
        <category term="paper" />
      

      
        <summary type="html">소논문 관련연구 (Related Studies of Extended Essay)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">영어 보고서 2022</title>
      <link href="https://hweejoon-chung.github.io/english202209-assessment" rel="alternate" type="text/html" title="영어 보고서 2022" />
      <published>2022-09-29T13:47:00+09:00</published>
      <updated>2022-09-29T13:47:00+09:00</updated>
      <id>https://hweejoon-chung.github.io/english202209-assessment</id>
      <content type="html" xml:base="https://hweejoon-chung.github.io/english202209-assessment">&lt;hr /&gt;
&lt;h1 id=&quot;영어-보고서&quot;&gt;영어 보고서&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/assets/built/data/202209_영어.docx&quot;&gt;202209_영어.docx&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Hwee Joon Chung</name>
        
        
      </author>

      

      
        <category term="paper" />
      

      
        <summary type="html">영어 보고서</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unity 설정</title>
      <link href="https://hweejoon-chung.github.io/setup-unity" rel="alternate" type="text/html" title="Unity 설정" />
      <published>2022-09-26T04:54:00+09:00</published>
      <updated>2022-09-26T04:54:00+09:00</updated>
      <id>https://hweejoon-chung.github.io/setup-unity</id>
      <content type="html" xml:base="https://hweejoon-chung.github.io/setup-unity">&lt;h2 id=&quot;unity-설정&quot;&gt;UNITY 설정&lt;/h2&gt;

&lt;p&gt;www.unity3d.com 로 들어가서 Unity Hub를 먼저 다운로드해서 설치&lt;/p&gt;

&lt;p&gt;회원가입해서 로그인하면 라이선스 관리 창에서 Unity Personal 선택&lt;/p&gt;

&lt;p&gt;(저는 고등학생이라 학생용 라이센스를 발급받았습니다.-.-;)&lt;/p&gt;

&lt;p&gt;원하는 Unity Editor 버전을 설치 (가급적 LTS 버전)&lt;/p&gt;

&lt;p&gt;(버전별로 기능동작이 상이하므로 동일한 버전 상에서 개발하는 것이 좋음)&lt;/p&gt;

&lt;h2 id=&quot;project-설정&quot;&gt;Project 설정&lt;/h2&gt;

&lt;p&gt;Unity Hub의 Project 탭에서 새 프로젝트 생성&lt;/p&gt;

&lt;p&gt;원하는 Unity Editor 버전 선택 (설치한 버전들만 가능)&lt;/p&gt;

&lt;p&gt;프로젝트 이름과 저장위치 선택&lt;/p&gt;

&lt;p&gt;생성 완료 후 Unity Editor 열림&lt;/p&gt;

&lt;h2 id=&quot;unity-editor-내-window들-역할기능&quot;&gt;Unity Editor 내 Window들 역할/기능&lt;/h2&gt;

&lt;h3 id=&quot;scene-view&quot;&gt;Scene View&lt;/h3&gt;

&lt;p&gt;Scene이라는 개념은 일종의 맵/레벨임&lt;/p&gt;

&lt;p&gt;Scene View는 현재 프로젝트에서 내가 제작 중인 전체를 볼 수 있어, 배경/캐랙터/소품 등을 배치하기 위한 용도로 사용&lt;/p&gt;

&lt;h3 id=&quot;hierarchy-window&quot;&gt;Hierarchy Window&lt;/h3&gt;

&lt;p&gt;Scene View에 배치되어 있는 물체(Object)들을 보여줌&lt;/p&gt;

&lt;p&gt;Scene 이름, 포함된 Object들&lt;/p&gt;

&lt;p&gt;기본 Object : Main Camera / Directional Light&lt;/p&gt;

&lt;h3 id=&quot;project-window&quot;&gt;Project Window&lt;/h3&gt;

&lt;p&gt;현재 프로젝트에 포함된 텍스처/모델링/스크립트/Scene 등의 Asset을 보여줌&lt;/p&gt;

&lt;p&gt;실제 프로젝트 구성에 필요한 모든 자료(Asset)들이 모여있는 곳&lt;/p&gt;

&lt;p&gt;필요한 Asset들을 Asset Store에서 다운로드하거나, 새로운 스크립트를 생성하여 Object에 기능을 부여할 때 등 모든 Asset들을 관리&lt;/p&gt;

&lt;h3 id=&quot;inspector-window&quot;&gt;Inspector Window&lt;/h3&gt;

&lt;p&gt;Scene View나 Hierarchy/Project Window에 있는 Object나 Asset을 선택하면 자세한 내용들을 보여줌&lt;/p&gt;

&lt;p&gt;Object나 Asset의 자세한 정보를 확인하고 수정할 수 있음&lt;/p&gt;

&lt;h3 id=&quot;game-view&quot;&gt;Game View&lt;/h3&gt;

&lt;p&gt;Scene View와 유사하지만 다른 점은 카메라가 보여주는 것만을 볼 수 있음&lt;/p&gt;

&lt;p&gt;실제로 우리가 개발한 프로그램이 실행될 때 보게 될 장면을 보여주는 창&lt;/p&gt;

&lt;h3 id=&quot;asset-store&quot;&gt;Asset Store&lt;/h3&gt;

&lt;p&gt;프로젝트에 사용할 수 있는 다양한 에셋들을 다운로드할 수 있는 곳&lt;/p&gt;

&lt;p&gt;Avatar/네트워킹관련/가구나 과일 같은 Object 등 다른 사람이 만든 Asset들을 다운받아 사용 가능&lt;/p&gt;

&lt;h3 id=&quot;console-window&quot;&gt;Console Window&lt;/h3&gt;

&lt;p&gt;프로그래밍을 할 때 필수적인 로그라는 형태의 다양한 메시지들이 나타남&lt;/p&gt;

&lt;p&gt;개발 도중 발생한 에러/경고 확인 가능&lt;/p&gt;

&lt;p&gt;구현한 기능들을 테스트하거나 값들을 확인 가능&lt;/p&gt;

&lt;p&gt;출력된 로그들을 더블클릭하면 코드를 입력하고 수정할 수 있는 Visual Studio가 열리고 해당 로그가 출력된 스크립트 위치로 이동&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Hwee Joon Chung</name>
        
        
      </author>

      

      
        <category term="unity" />
      

      
        <summary type="html">UNITY 설정</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Metaverse와 Unity</title>
      <link href="https://hweejoon-chung.github.io/metaverse-unity" rel="alternate" type="text/html" title="Metaverse와 Unity" />
      <published>2022-09-24T18:24:00+09:00</published>
      <updated>2022-09-24T18:24:00+09:00</updated>
      <id>https://hweejoon-chung.github.io/metaverse-unity</id>
      <content type="html" xml:base="https://hweejoon-chung.github.io/metaverse-unity">&lt;h2 id=&quot;metaverse&quot;&gt;METAVERSE&lt;/h2&gt;

&lt;p&gt;META(가상/초월) + uniVERSE(세계/우주)&lt;/p&gt;

&lt;p&gt;(협의) 우리가 함께 공존할 수 있는 현실 같은 3차원 가상 세계&lt;/p&gt;

&lt;p&gt;(광의) 정치/경제/사회/문화 전반적 측면에서 현실과 비현실 모두 공존할 수 있는 생활형/게임형 가상 세계&lt;/p&gt;

&lt;h2 id=&quot;unity&quot;&gt;UNITY&lt;/h2&gt;

&lt;p&gt;2005년 Apple 세계 개발자 회의(WWD)에서 OS X용 게임엔진으로 최초 공개&lt;/p&gt;

&lt;p&gt;전세계 게임엔진 시장의 40~50% 차지&lt;/p&gt;

&lt;p&gt;등록된 개발자 수 5백만명 넘음&lt;/p&gt;

&lt;p&gt;자체 라이트 매핑, 물리 엔진 등 미들웨어 탑재&lt;/p&gt;

&lt;p&gt;에디터에 내장된 Asset Store를 통해 다양한 Asset 다운로드/사용 가능&lt;/p&gt;

&lt;h2 id=&quot;metaverse와-unity&quot;&gt;Metaverse와 Unity&lt;/h2&gt;

&lt;p&gt;Metaverse를 구현하기 위해 3D 특화 실시간 개발 플랫폼인 Unity를 사용&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;직관적인 개발이 가능하고 원하는 기능들을 사용자가 원하는 대로 개발 가능&lt;/p&gt;
&lt;/blockquote&gt;</content>

      
      
      
      
      

      <author>
          <name>Hwee Joon Chung</name>
        
        
      </author>

      

      
        <category term="unity" />
      

      
        <summary type="html">METAVERSE</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">수학을 이용한 실생활 연구 질문</title>
      <link href="https://hweejoon-chung.github.io/mathreallife202209-assessment" rel="alternate" type="text/html" title="수학을 이용한 실생활 연구 질문" />
      <published>2022-09-20T19:59:00+09:00</published>
      <updated>2022-09-20T19:59:00+09:00</updated>
      <id>https://hweejoon-chung.github.io/mathreallife202209-assessment</id>
      <content type="html" xml:base="https://hweejoon-chung.github.io/mathreallife202209-assessment">&lt;hr /&gt;
&lt;h1 id=&quot;수학을-이용한-실생활-연구-질문&quot;&gt;수학을 이용한 실생활 연구 질문&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/assets/built/data/202209_문제지_고2_1수학을이용한실생활연구질문.hwp&quot;&gt;202209_문제지_고2_1수학을이용한실생활연구질문.hwp&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Hwee Joon Chung</name>
        
        
      </author>

      

      
        <category term="paper" />
      

      
        <summary type="html">수학을 이용한 실생활 연구 질문</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">자기평가 IB수학HL</title>
      <link href="https://hweejoon-chung.github.io/mathHLself202209-assessment" rel="alternate" type="text/html" title="자기평가 IB수학HL" />
      <published>2022-09-14T15:18:00+09:00</published>
      <updated>2022-09-14T15:18:00+09:00</updated>
      <id>https://hweejoon-chung.github.io/mathHLself202209-assessment</id>
      <content type="html" xml:base="https://hweejoon-chung.github.io/mathHLself202209-assessment">&lt;hr /&gt;
&lt;h1 id=&quot;자기평가---ib수학hl&quot;&gt;자기평가 - IB수학HL&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/assets/built/data/202209_자기평가_2022학년도2학년2학기_IB수학HL.hwp&quot;&gt;202209_자기평가_2022학년도2학년2학기_IB수학HL.hwp&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Hwee Joon Chung</name>
        
        
      </author>

      

      
        <category term="paper" />
      

      
        <summary type="html">자기평가 - IB수학HL</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Design pattern</title>
      <link href="https://hweejoon-chung.github.io/designpattern" rel="alternate" type="text/html" title="Design pattern" />
      <published>2022-09-12T06:59:00+09:00</published>
      <updated>2022-09-12T06:59:00+09:00</updated>
      <id>https://hweejoon-chung.github.io/designpattern</id>
      <content type="html" xml:base="https://hweejoon-chung.github.io/designpattern">&lt;hr /&gt;

&lt;h2 id=&quot;객체지향-디자인-패턴&quot;&gt;객체지향 (디자인 패턴)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체 지향 설계 패턴 : 객체 지향 프로그래밍 설계 경험을 통해 추천되는 설계 패턴을 구현한 것&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;싱글톤 패턴&lt;/p&gt;

    &lt;p&gt;클래스에 대한 객체가 한 개만 생성되도록 하는 패턴&lt;/p&gt;

    &lt;p&gt;객체를 생성할 때마다 메모리가 소모됨&lt;/p&gt;

    &lt;p&gt;객체 생성 시간, 메모리 사용량 등을 줄일 수 있음&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Singleton(type):
	__instances = {}
	def __call__(cls, *args, **kwargs):
		if cls not in cls.__instances:
			cls.__instances[cls] = super().__call__(cls, *args, **kwargs)
  			
		return cls.__instances[cls]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Singleton 클래스로 인스턴스를 생성한 적이 없다면 인스턴스를 생성 후 리턴&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class PrintObject(metaclass=Singleton):
	def __init__(self):
		print(&quot;This is called by super().__call__&quot;)
  		
object1 = PrintObject()
object2 = PrintObject()
print(object1)
print(object2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;옵저버 패턴&lt;/p&gt;

    &lt;p&gt;객체의 상태가 변했을 때 그 객체와 관련된 다른 객체들에게 상태가 변한 것을 알리는 패턴&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Observer:
	def __init__(self):
		self.observers = list()
		self.msg = str()
  		
	def notify(self, event_data):
		for observer in self.observers:
			observer.notify(event_data)
  			
	def register(self, observer):
		self.observers.append(observer)
  		
	def unregister(self, observer):
		self.observers.remove(observer)
  		
class Notifier:
	def notify(self, event_data):
		print(event_data, &quot;received&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;빌더 패턴&lt;/p&gt;

    &lt;p&gt;생성자에 들어갈 매개 변수가 너무 복잡해서 가독성이 떨어지고 어떤 변수가 어떤 값인지 알기 어렵거나 전체 변수 중 일부 값만 설정하는 경우&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Student(object):
	def __init__(self, name, age=20, height=180, weight=60, major=&quot;cs&quot;):
		self.name = name
		self.age = age
		self.height = height
		self.weight = weight
		self.major = major
  		
student1 = Student(&quot;Dave&quot;)
print(student1.name)
print(student1.age)
print(student1.height)
print(student1.weight)
print(student1.major)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;student1 = Student(major=&quot;ds&quot;, name=&quot;David&quot;)
print(student1.name)
print(student1.age)
print(student1.height)
print(student1.weight)
print(student1.major)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;팩토리 패턴&lt;/p&gt;

    &lt;p&gt;객체를 생성하는 팩토리를 정의함&lt;/p&gt;

    &lt;p&gt;어떤 객체를 만들지는 팩토리 객체에서 결정함&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Androidsmartphone:
	def send(self, message):
		print(&quot;send a message via Android platform&quot;)
  		
class Iossmartphone:
	def send(self, message):
		print(&quot;send a message via IOS platform&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Smartphonefactory(object):
	def __init__(self):
		pass
  		
	def create_smartphone(self,device_type)
		if device_type == &quot;android&quot;:
			smartphone = AndroidSmartphone()
		elif device_type == &quot;IOS&quot;:
			smartphone = IosSmartphone()
  		
		return smartphone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smartphone_factory = Smartphonefactory()
message_sender1 = smartphone_factory.create_smartphone(&quot;android&quot;)
message_sender1.send(&quot;hello&quot;)

message_sender1 = smartphone_factory.create_smartphone(&quot;IOS&quot;)
message_sender1.send(&quot;hi&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Hwee Joon Chung</name>
        
        
      </author>

      

      
        <category term="oop" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">S.O.L.I.D</title>
      <link href="https://hweejoon-chung.github.io/SOLID" rel="alternate" type="text/html" title="S.O.L.I.D" />
      <published>2022-09-11T05:38:00+09:00</published>
      <updated>2022-09-11T05:38:00+09:00</updated>
      <id>https://hweejoon-chung.github.io/SOLID</id>
      <content type="html" xml:base="https://hweejoon-chung.github.io/SOLID">&lt;hr /&gt;

&lt;h2 id=&quot;객체지향-클래스-설계의-원칙-solid&quot;&gt;객체지향 (클래스 설계의 원칙 SOLID)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;SOLID:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;S : Single responsibility principle(단일 책임의 원칙)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;O : Open closed principle(개방, 폐쇄의 원칙)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;L : Liskov substitusion principle(리스코프 치환의 원칙)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;I : Interface segregation principle(인터페이스 분리의 원칙)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;D : Dependency inversion principle(의존성 역전의 원칙)&lt;/p&gt;

        &lt;p&gt;​&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단일 책임의 원칙&lt;/p&gt;

    &lt;p&gt;한 클래스는 한 개의 책임을 가져야 함&lt;/p&gt;

    &lt;p&gt;문제 발생 시 클래스에서 발생할 문제가 한 개여야 함&lt;/p&gt;

    &lt;p&gt;ex) 슈팅 게임에서 플레이어를 설계할 때 이동하는 클래스와 적 탄환에 피격 당하는 클래스를 따로 만들어야 함&lt;/p&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개방, 폐쇄의 원칙&lt;/p&gt;

    &lt;p&gt;확장에는 개방되어야 하고 변경에는 폐쇄되어야 함&lt;/p&gt;

    &lt;p&gt;ex) 속도, 크기는 같지만 모양만 다른 탄환을 만들 때 모양만을 자식 클래스에서 재정의 함&lt;/p&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;리스코프 치환의 원칙&lt;/p&gt;

    &lt;p&gt;자식 클래스는 그 부모 클래스와 교체할 수 있어야 함&lt;/p&gt;

    &lt;p&gt;ex) 부모 클래스가 인간, 자식 클래스가 소크라테스일 때&lt;/p&gt;

    &lt;p&gt;사람은 죽는다.&lt;/p&gt;

    &lt;p&gt;사람은 숨을 쉰다.&lt;/p&gt;

    &lt;p&gt;​&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  소크라테스는 죽는다.

  소크라테스는 숨을 쉰다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인터페이스 분리의 원칙&lt;/p&gt;

    &lt;p&gt;클래스에서 사용하지 않는 메서드는 분리해야 함&lt;/p&gt;

    &lt;p&gt;ex) 플레이어가 피해를 받는 클래스에 플레이어의 공격력과 관련된 메서드는 넣을 필요가 없음&lt;/p&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;의존성 역전의 원칙&lt;/p&gt;

    &lt;p&gt;부모 클래스가 자식 클래스의 구현에 의존하면 안 됨&lt;/p&gt;

    &lt;p&gt;자식 클래스를 수정할 때 부모 클래스도 수정해야 하면 안 됨&lt;/p&gt;

    &lt;p&gt;ex) 소크라테스의 특징이 변경됐을 때 인간의 특징도 바뀌면 안 됨&lt;/p&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Hwee Joon Chung</name>
        
        
      </author>

      

      
        <category term="oop" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">융합 탐구 프로젝트 - 컴퓨터과학</title>
      <link href="https://hweejoon-chung.github.io/csconvergence202209-assessment" rel="alternate" type="text/html" title="융합 탐구 프로젝트 - 컴퓨터과학" />
      <published>2022-09-04T11:58:00+09:00</published>
      <updated>2022-09-04T11:58:00+09:00</updated>
      <id>https://hweejoon-chung.github.io/csconvergence202209-assessment</id>
      <content type="html" xml:base="https://hweejoon-chung.github.io/csconvergence202209-assessment">&lt;hr /&gt;
&lt;h1 id=&quot;융합-탐구-프로젝트---컴퓨터과학&quot;&gt;융합 탐구 프로젝트 - 컴퓨터과학&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/assets/built/data/202209_융합탐구프로젝트_컴퓨터과학.docx&quot;&gt;202209_융합탐구프로젝트_컴퓨터과학.docx&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Hwee Joon Chung</name>
        
        
      </author>

      

      
        <category term="paper" />
      

      
        <summary type="html">융합 탐구 프로젝트 - 컴퓨터과학</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">포함(Composition)</title>
      <link href="https://hweejoon-chung.github.io/composition" rel="alternate" type="text/html" title="포함(Composition)" />
      <published>2022-08-31T07:05:00+09:00</published>
      <updated>2022-08-31T07:05:00+09:00</updated>
      <id>https://hweejoon-chung.github.io/composition</id>
      <content type="html" xml:base="https://hweejoon-chung.github.io/composition">&lt;hr /&gt;

&lt;h2 id=&quot;객체지향-포함--composition&quot;&gt;객체지향 (포함 : Composition)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;한 클래스 내에서 다른 클래스의 특정한 기능만을 사용하려 할 때 사용함&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    	&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt;
   		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;
    	&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;atkscore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maxrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sprate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double_Attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    	&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt;
   		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;
    	&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;atkscore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maxrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sprate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Attack 클래스에서 self.damge * self.speed * self.crit과 self.crit * 100, self.speed * self.crit을 리턴&lt;/p&gt;

&lt;p&gt;Double_Attack 클래스에서 self.damge * self.speed * self.crit과 self.crit/2 * 100, self.speed * self.crit을 리턴&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double_Attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    	&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt;
   		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;
    	&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;atkscore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maxrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sprate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Double_Attack에서 self.speed * self.crit 대신 Attack 클래스의 speed*crit을 리턴&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Hwee Joon Chung</name>
        
        
      </author>

      

      
        <category term="oop" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
