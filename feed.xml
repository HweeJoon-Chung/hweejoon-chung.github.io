<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-10T16:38:42+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">HWEE JOON’s Persona</title><subtitle>CHUNG HWEE JOON&apos;s Personal Blog</subtitle><author><name>Chung Hwee Joon</name></author><entry><title type="html">Python - 기본</title><link href="http://localhost:4000/python-basic" rel="alternate" type="text/html" title="Python - 기본" /><published>2021-04-05T08:32:00+09:00</published><updated>2021-04-05T08:32:00+09:00</updated><id>http://localhost:4000/python-basic</id><content type="html" xml:base="http://localhost:4000/python-basic">&lt;h2 id=&quot;python-기본&quot;&gt;Python 기본&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Python 기초를 넘어 기본 개념 중 기억할 것들만 정리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;자료를 거꾸로 출력하기&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;data = [1,2,3,4,5,6,7,8,9,10]
data.reverse()

for item in data:
	print(item)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10
9
8
7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hwee Joon Chung</name></author><category term="python" /><summary type="html">Python 기본</summary></entry><entry><title type="html">Unity - 기본</title><link href="http://localhost:4000/unity-basic" rel="alternate" type="text/html" title="Unity - 기본" /><published>2021-03-26T04:32:00+09:00</published><updated>2021-03-26T04:32:00+09:00</updated><id>http://localhost:4000/unity-basic</id><content type="html" xml:base="http://localhost:4000/unity-basic">&lt;h2 id=&quot;unity---unity-software라는-회사가-만든-게임엔진이자-통합-저작-도구-게임엔진이자-앱개발-머신러닝-애니메이션-등-다양한-작업에-활용&quot;&gt;Unity - Unity Software라는 회사가 만든 게임엔진이자 통합 저작 도구. 게임엔진이자 앱개발, 머신러닝, 애니메이션 등 다양한 작업에 활용.&lt;/h2&gt;

&lt;p&gt;게임 엔진 - 2D 및 3D 비디오 게임의 개발 환경을 제공하여 모든 작업을 하나하나 코딩해줘야 하는 번거로움을 줄이고 이미 개발되어 있는 다양한 기능들을 조립 방식으로 사용. 게임을 만드는 데 도움이 되거나 필요한 다양한 라이브러리/툴들과 기능들을 모아 놓은 소프트웨어._&lt;/p&gt;

&lt;p&gt;Windows 64bit 버전과 Mac OS X Sierra 10.12.6+, Ubuntu 16.04/18.04 지원&lt;/p&gt;

&lt;p&gt;DX10+ 지원 GPU 그래픽 카드&lt;/p&gt;

&lt;p&gt;Unity Hub는 여러 버전의 유니티를 설치 가능.&lt;/p&gt;

&lt;h2 id=&quot;기본-개념&quot;&gt;기본 개념&lt;/h2&gt;

&lt;p&gt;객체(Object) : 게임의 캐릭터 처럼 게임에서 보이는 물체&lt;/p&gt;

&lt;p&gt;컴포넌트 : 게임객체의 모양, 재질, 물리적 특성, 동작 등을 정의 (객체는 컴포넌트로 이뤄짐). 인스펙터 윈도우에서 설정.&lt;/p&gt;

&lt;p&gt;스크립트 : 컴포넌트 중 객체의 동작을 정의하는 것. C# 또는 Javascript 지원.&lt;/p&gt;

&lt;p&gt;유니티에서 프로그래머가 원하는 대로 게임객체를 동작하게 하려면 스크립트에 원하는 코드를 정의하면 됨.&lt;/p&gt;

&lt;p&gt;게임에서 플레이어의 몹사냥, 다른 플레이어와의 전투 등 게임객체 간 상호작용이 많이 발생하는데, 유니티에서는 이벤트 기반으로 처리함.(플레이어가 몹 공격 시 충돌 이벤트 발생하여 몹 객체 안에 코딩된 스크립트에서 다음 동작 결정)&lt;/p&gt;

&lt;h2 id=&quot;인터페이스&quot;&gt;인터페이스&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;툴바(Toolbar) : 씬뷰(Scene view)와 게임객체들(GameObjects)을 조작하는 기본 툴, 게임 실행/멈춤/정지/스텝 컨트롤, 서비스 관련 접근, 레이어 메뉴, 에디터 레이아웃 메뉴&lt;/li&gt;
  &lt;li&gt;계층 윈도우(Hierarchy Window) : Scene 내에 만든 모든 게임객체들(GameObjects)의 계층화된 목록.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Scene 내 아이템을 추가하려면 계층 윈도우에서 시작하고 씬뷰와 연결되어 있음. 계층화되어 있어 부모 자식 관계 존재.&lt;/p&gt;

&lt;p&gt;자식은 부모의 이동과 회전 속성을 상속 가능.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;씬뷰(Scene View) : 개발자가 생성한 모든 객체와 카메라/조명과 같은 게임에 필요한 기본 객체가 배치.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;씬뷰에서 객체를 조작하고 설정하는 것이 유니티의 핵심.&lt;/p&gt;

&lt;p&gt;프로젝트의 종류에 따라 2D 또는 3D 관점.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;게임뷰(Game View) : 씬 카메라로 보이는 최종 만들어진 게임 모습.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;유니티에서는 카메라 개념을 통해 사용자에게 보여지는 화면을 제어하는데, 카메라가 바라보는 게임의 최종 모습이 게임뷰에 나타남.&lt;/p&gt;

&lt;p&gt;툴바의 게임 실행 버튼을 누르면 게임뷰 이동하여 게임이 실행.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;인스펙터 윈도우(Inspector Window) : 현재 선택된 게임객체(GameObject)의 모든 속성이 표시되고 편집 가능.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;게임객체에 따라 다른 종류의 속성들을 가지므로 인스펙터 윈도우의 레이아웃과 항목들도 선택한 게임객체에 따라 변화.&lt;/p&gt;

&lt;p&gt;게임객체의 위치, 외형, 중력, 사용자 정의 스크립트 등 다양한 속성 설정/변경 가능&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;프로젝트 윈도우(Project Window) : 프로젝트 내에서 사용가능한 모든 에셋(Asset) 목록 표시.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;프로젝트로 에셋을 Import하면 프로젝트 윈도우에 표시됨.&lt;/p&gt;

&lt;p&gt;좌측 계층구조창에는 폴더 목록, 우측화면에는 폴더 목록에서 선택한 폴더의 에셋 목록 표시.&lt;/p&gt;

&lt;p&gt;에셋 목록에서 에셋을 선택하면 인스펙터 윈도우에 관련 정보 표시됨.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;콘솔 윈도우( Console Window) : 유니티에서 생성되는 오류, 경고 등 다양한 메시지 출력.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Debug.Log, Debug.LogWarning, Debug.LogError 함수 이용하여 표시.&lt;/p&gt;</content><author><name>Hwee Joon Chung</name></author><category term="unity" /><summary type="html">Unity - Unity Software라는 회사가 만든 게임엔진이자 통합 저작 도구. 게임엔진이자 앱개발, 머신러닝, 애니메이션 등 다양한 작업에 활용.</summary></entry><entry><title type="html">OOP - 기본</title><link href="http://localhost:4000/oop-basic" rel="alternate" type="text/html" title="OOP - 기본" /><published>2021-02-21T05:32:00+09:00</published><updated>2021-02-21T05:32:00+09:00</updated><id>http://localhost:4000/oop-basic</id><content type="html" xml:base="http://localhost:4000/oop-basic">&lt;h2 id=&quot;프로그래밍-언어&quot;&gt;프로그래밍 언어&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;컴퓨터와 의사소통 하기 위한 명령들로 이루어진 프로그램을 작성할 수 있도록 만든 언어&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;인간은 보다 발전된 계산기인 컴퓨터를 만들었음&lt;/li&gt;
  &lt;li&gt;컴퓨터(CPU)는 0과 1, 즉 이진수 형태의 코드인 기계어만 이해함.
    &lt;ul&gt;
      &lt;li&gt;Instruction set : CPU가 수행할 수 있는 명령어 집합&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기계어나 어셈블리어와 같은 저급언어는 컴퓨터가 이해하기 용이하지만, 인간이 이해하기 어려움&lt;/li&gt;
  &lt;li&gt;인간이 이해하기 쉬운 고급언어(C, JAVA, PYTHON등)를 사용하여 프로그래밍함&lt;/li&gt;
  &lt;li&gt;어셈블리어나 고급언어는 기계어로 변환되어 CPU로 전달되어 실행
    &lt;ul&gt;
      &lt;li&gt;변환 시 어셈블러, 인터프리터(PYTHON, RUBY 등)나 컴파일러(C, JAVA 등) 프로그램 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;절차적-프로그래밍에서-객체지향-프로그래밍으로&quot;&gt;절차적 프로그래밍에서 객체지향 프로그래밍으로…&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;PACSCAL이나 C와 같은 절자적 프로그래밍에서 객체 단위로 데이터와 기능을 통합사용하는 객체지향 프로그래밍으로 발전&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;핵심은 Class와 Object(Instance)&lt;/li&gt;
  &lt;li&gt;Class는 틀이나 설계도 (ex. 무기 설계도)이며 Attribute(데이터)와 Method(기능)을 가짐&lt;/li&gt;
  &lt;li&gt;Object는 실체화된 객체 (ex. 실체화된 K2소총/REDSTOE미사일) 이며 정의된 Class로 생성 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;객체지향-프로그래밍object-oriented-programming-oop&quot;&gt;객체지향 프로그래밍(Object-Oriented Programming: OOP)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;틀/설계도인 Class 설계하고 코드화&lt;/li&gt;
  &lt;li&gt;Class를 활용하여 필요한 Object 생성하여 그 데이터와 기능 이용하여 프로그래밍&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hwee Joon Chung</name></author><category term="oop" /><summary type="html">프로그래밍 언어</summary></entry><entry><title type="html">Git - Github Page - 기본</title><link href="http://localhost:4000/git-github-jekyll" rel="alternate" type="text/html" title="Git - Github Page - 기본" /><published>2021-02-09T01:40:00+09:00</published><updated>2021-02-09T01:40:00+09:00</updated><id>http://localhost:4000/git-github-jekyll</id><content type="html" xml:base="http://localhost:4000/git-github-jekyll">&lt;h2 id=&quot;github-page&quot;&gt;Github Page&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;웹호스팅 서비스&lt;/li&gt;
  &lt;li&gt;해당 Repository에 대한 설명 웹페이지로 사용되나 기본 블로그로 사용하기도 함
    &lt;ul&gt;
      &lt;li&gt;마크다운 언어 사용가능한 정적 사이트 생성기인 Jekyll 프레임워크 지원
        &lt;ul&gt;
          &lt;li&gt;마크다운 파일을 HTML로 변환하는 일종의 CMS(Content Management System)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.nojekyll&lt;/code&gt; 파일을 만들어 루트 디렉토리에 올리면 Jekyll 사용안함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블로그로 사용 시 다양한 Jekyll 테마를 활용할 수 있음 (http://jekyllthemes.org/)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;사용방법&quot;&gt;사용방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;jekyll 프레임워크를 사용하려면 먼저 ruby 개발환경이 설치되어있어야 함&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;참고. ruby-basic.md&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;추가 개발환경 설정 (VS Code, git, markdown 에디터 등)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;참고. dev-env.md&lt;/li&gt;
      &lt;li&gt;markdown 에디터는 Typora가 가장 만족스럽지만 유료화됨
        &lt;ul&gt;
          &lt;li&gt;beta버전은 사용가능&lt;/li&gt;
          &lt;li&gt;대안으로 MarkText ( https://github.com/marktext/marktext#download-and-installation )&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;http://jekyllthemes.org/에서 원하는 테마를 선택하여 다운로드함&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;또는 해당 &lt;strong&gt;github&lt;/strong&gt; 사이트에서 &lt;strong&gt;git clone&lt;/strong&gt;을 해도 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다운로드한 테마의 소스코드를 원하는 폴더(공백없어야 함)에 압축 해제하여 저장&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;VS Code를 실행하여 압축해제한 테마의 소스코드 폴더 열기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;VS Code의 터미널을 열어 bundler 설치되어 있는지 확인&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundler -v 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;으로 버전 확인&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;설치 안되어 있으면&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;실행하여 설치&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;터미널에서 테마의 소스코드 폴더로 이동하여 해당 폴더에서 필요한 gem 패키지 설치&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;필요한 패키지들은 해당 소스코드 폴더의 Gemfile에 기술됨&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;해당 테마 블로그를 빌드하여 실행&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundlle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;bundle exec jekyll serve –host HostIP –port PortNumber&lt;/p&gt;

      &lt;p&gt;IP와 Port 변경 가능&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;Jekyll 소스 파일들이 변환되어 결과물들이 destination 폴더에 저장
        &lt;ul&gt;
          &lt;li&gt;destination폴더 내용이 실제 Github Page에 올릴 사이트임&lt;/li&gt;
          &lt;li&gt;즉, github repository로 push할 변환 결과물&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;블로그 포스팅하기&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;해당 소스코드 폴더 내 _post 폴더에 포스팅할 파일을 마크다운 형식으로 작성&lt;/li&gt;
      &lt;li&gt;작성 후 빌드/실행하면 destination 폴더내에 포스팅 파일이 변환되어 생성됨&lt;/li&gt;
      &lt;li&gt;생성된 destination 폴더 내 블로그 사이트를 github로 push&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jekyll-환경-설정-소스코드&quot;&gt;Jekyll 환경 설정 (소스코드)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;_config.yml 파일 : 전체 설정파일&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;build 시 환경변수 default값이 development로 설정 : 빌드시 localhost 설정됨&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;실제 release버전을 build할 때는 JEKYLL_ENV 환경변수값을 production으로 변경 : 빌드 시 URL 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JEKYLL_ENV=production jekyll build
또는
JEKYLL_ENV=production jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;파일-minified&quot;&gt;파일 Minified&lt;/h3&gt;

&lt;p&gt;크기가 큰 파일(JSON, CSS, HTML, XML, Javascript 등)은 축소(압축)할 필요가 있어 minified되어야 사용 용이&lt;/p&gt;

&lt;h5 id=&quot;사용방법-1-gulp를-이용하여-파일-크기를-줄이자-nodejs-gulp-버전에-따라-문제많음&quot;&gt;사용방법 1. Gulp를 이용하여 파일 크기를 줄이자! (node.js, gulp 버전에 따라 문제많음)&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Gulp 실행하기 위해 node.js 다운로드받아 기본설정으로 설치
    &lt;ul&gt;
      &lt;li&gt;gulpfile.js 작성/수정 : css파일 줄이기 위해
        &lt;ul&gt;
          &lt;li&gt;gulp.task(‘css’, function () {&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;package.json 작성/수정 : 필요한 node_modules 설치위해&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;npm install 실행 (package.json이 있는 소스폴더 루트에서)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;node_modules폴더 생성된 것 확인&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;gulp 실행 (ex. gulp css)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;사용방법-2-vs-code-내-확장팩-minifyall-설치&quot;&gt;사용방법 2. VS Code 내 확장팩 &lt;strong&gt;MinifyAll&lt;/strong&gt; 설치&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;디버깅이나 직접 수정할 수 있는 map파일은 만들어지지 않지만 경량화는 되니까…^^;&lt;/li&gt;
  &lt;li&gt;각 파일/폴더에서 오른쪽 마우스 눌리고 기존 버전 유지하고 새버전으로 저장(…min.파일 생성)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;css와-웹폰트-적용하기&quot;&gt;CSS와 웹폰트 적용하기&lt;/h3&gt;

&lt;h4 id=&quot;css&quot;&gt;CSS&lt;/h4&gt;

&lt;h5 id=&quot;원하는-css-파일을-추가하고-_layoutsdefaulthtml-내에-아래-추가&quot;&gt;원하는 CSS 파일을 추가하고 _layouts/default.html 내에 아래 추가&lt;/h5&gt;

&lt;p&gt;​    &lt;!-- custom.css --&gt;&lt;/p&gt;

&lt;p&gt;​    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/built/custom.css&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;rougepure-ruby-syntax-highlighter-활용&quot;&gt;rouge(pure-ruby syntax highlighter) 활용&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;원하는 특정 스타일 css를 적용하기 위한 도구&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_config.yml 설정파일 내에 아래 추가&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;highlighter: rough&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rough 설치&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;gem install rough&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rougify help style 명령으로 사용가능한 테마 중 선택&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;제일 기본인 base16.dark 테마 선택해서 style.css 생성
        &lt;ul&gt;
          &lt;li&gt;rougify style base16.dark &amp;gt; assets/css/syntax.css&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;minify해서 assets/built/css/syntax.css로 저장&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_layouts/default.html 내에 아래 추가&lt;/p&gt;

    &lt;!-- syntax.css --&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/built/syntax.css&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;code block 사용시 아래와 같이 “~~~” 사이 사용언어 추가해주면 스타일 적용&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;​~~~python
data = [1,2,3,4,5,6,7,8,9,10]
data.reverse()

for item in data:
	print(item)
​~~~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;웹폰트&quot;&gt;웹폰트&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;가벼운 나눔고딕 사용&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;_layouts/default.html 내에 아래 추가&lt;/p&gt;

    &lt;!-- Web Fonts  --&gt;

    &lt;p&gt;​    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/earlyaccess/nanumgothic.css&quot; /&gt;&lt;/p&gt;

    &lt;!-- swap방식이 느리다고 하긴 하는데..-.-;

​    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Nanum+Gothic&amp;display=swap&quot;&gt;

--&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jekyll-실행-시-error-처리&quot;&gt;Jekyll 실행 시 Error 처리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ruby31-x64/lib/ruby/gems/3.1.0/gems/jekyll-3.9.0/lib/jekyll/commands/serve/servlet.rb:3:in `require’: cannot load such file – webrick (LoadError)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Jekill은 webrick 지원함&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ruby 버전 3.0 이상에서 기존의 gem이 webrick을 사용하지 않는 것 같음&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle add webrick
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;실행하거나 또는 직접 아래 내용을&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;gem “webrick”, “~&amp;gt; 1.7”&lt;/p&gt;
        &lt;/blockquote&gt;

        &lt;p&gt;Gemfile 내에 추가하고 bundle install 다시 실행(webrick 설치)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Please add the following to your Gemfile to avoid polling for changes:  gem ‘wdm’, ‘&amp;gt;= 0.1.0’ if Gem.win_platform?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;window platform에서 수정사항에 대한 polling을 피하기 위해 Gemfile에 wdm 추가&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle add wdm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;실행하거나 또는 직접 아래 내용을&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;gem “wdm”, “~&amp;gt; 0.1.0” if Gem.win_platform?&lt;/p&gt;
        &lt;/blockquote&gt;

        &lt;p&gt;Gemfile 내에 추가하고 bundle install 다시 실행(wdm 설치)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Error는 아니고 warning 수준&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hwee Joon Chung</name></author><category term="git" /><summary type="html">Github Page</summary></entry><entry><title type="html">dev - 개발환경설정 기본</title><link href="http://localhost:4000/dev-env" rel="alternate" type="text/html" title="dev - 개발환경설정 기본" /><published>2021-02-03T08:24:00+09:00</published><updated>2021-02-03T08:24:00+09:00</updated><id>http://localhost:4000/dev-env</id><content type="html" xml:base="http://localhost:4000/dev-env">&lt;h2 id=&quot;일반적인-개발환경-설정&quot;&gt;일반적인 개발환경 설정&lt;/h2&gt;

&lt;p&gt;현재 ruby, python, c++ 등의 코딩을 주로하는지라&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;버전관리는 &lt;strong&gt;git&lt;/strong&gt;,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CLI는 &lt;strong&gt;git bash&lt;/strong&gt;,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;에디터는 &lt;strong&gt;Visual studio code&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;를 활용한다.&lt;/p&gt;

&lt;h2 id=&quot;설치-windows-x64&quot;&gt;설치 (windows x64)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Visual Studio Code(이후 VS Code) 설치
    &lt;ul&gt;
      &lt;li&gt;https://code.visualstudio.com/Download 에서 windows 64 bit 버전을 다운로드함
        &lt;ul&gt;
          &lt;li&gt;어떤 버전을 설치할 지 모르겠다면 system installer 64bit를 다운로드!&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;설치파일 실행
        &lt;ul&gt;
          &lt;li&gt;추가작업선택에서 기타: 옵션들은 전부선택 추천 (탐색기에서 코드 열기 유용함)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;설치 완료 후 VS Code 첫 실행 시 설정
    &lt;ul&gt;
      &lt;li&gt;Color theme는  개인적으로 기본인 Dark가 편함(원하는 설정 선택)&lt;/li&gt;
      &lt;li&gt;나머지 설정들 중 원하는 기능 선택
        &lt;ul&gt;
          &lt;li&gt;git 설치가 안되었음 install git 기능 추가 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;git 설치
    &lt;ul&gt;
      &lt;li&gt;참고. git-basic.md&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-설치-후-vs-code의-환경설정&quot;&gt;git 설치 후 VS Code의 환경설정&lt;/h2&gt;

&lt;h4 id=&quot;language-pack을-설치하여-표시언어를-한국어로-변경&quot;&gt;Language Pack을 설치하여 표시언어를 한국어로 변경&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Notifications 윈도우가 떠서 설치 알려줌&lt;/li&gt;
  &lt;li&gt;Ctrl + Shift + x 를 눌러 확장팩 **Korean Language Pack for Visual Studio Code **설치&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;추가-확장팩-설치&quot;&gt;추가 확장팩 설치&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Auto Complete Tag : html/xml 태그들을 자동으로 닫고 이름변경 자동적용
    &lt;ul&gt;
      &lt;li&gt;Auto Rename Tag와 Auto Close Tag 확장팩들을 통합하여 설치&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;git-bash를-vs-code의-기본-터미널로-설정&quot;&gt;git bash를 VS Code의 기본 터미널로 설정&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;VS Code 실행하면 좌측하단의 설정아이콘(Manage) 클릭하여 &lt;strong&gt;Settings&lt;/strong&gt; 선택&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search settings 입력란에 &lt;strong&gt;terminal&lt;/strong&gt;을 입력&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Terminal: Explorer Kind 항목을 &lt;strong&gt;external&lt;/strong&gt;로 변경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Search settings 입력란에 &lt;strong&gt;terminal integrated profiles windows&lt;/strong&gt;를 입력
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Terminal &amp;gt; Integrated &amp;gt; Profiles: Windows 항목의 Edit in settings.json 클릭해서 수정&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;workbench.colorTheme&quot;: &quot;Default Dark+&quot;,
    &quot;terminal.integrated.profiles.windows&quot;: {
        &quot;PowerShell&quot;: {
            &quot;source&quot;: &quot;PowerShell&quot;,
            &quot;icon&quot;: &quot;terminal-powershell&quot;
        },
        &quot;Command Prompt&quot;: {
            &quot;path&quot;: [
                &quot;${env:windir}\\Sysnative\\cmd.exe&quot;,
                &quot;${env:windir}\\System32\\cmd.exe&quot;
            ],
            &quot;args&quot;: [],
            &quot;icon&quot;: &quot;terminal-cmd&quot;
        },
        &quot;GitBash&quot;: {
            &quot;path&quot;: [&quot;D:\\Dev\\Git\\bin\\bash.exe&quot;],
            &quot;icon&quot;: &quot;terminal-bash&quot;
        },
        
    },
    &quot;terminal.integrated.defaultProfile.windows&quot;: &quot;GitBash&quot;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;blockquote&gt;
          &lt;p&gt;실제 수정된 부분은&lt;/p&gt;

          &lt;p&gt;&lt;strong&gt;&lt;em&gt;“GitBash”: {&lt;/em&gt;&lt;/strong&gt;
            “path”: [“D:\Dev\Git\bin\bash.exe”],
            “icon”: “terminal-bash”
        },
    },
&lt;strong&gt;&lt;em&gt;“terminal.integrated.defaultProfile.windows”: “GitBash”,&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

          &lt;p&gt;이고 Git Bash의 경로(path)는 본인 환경에 맞게 수정.&lt;/p&gt;

          &lt;p&gt;주의할 점은 공백없이 GitBash임!&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;VS Code 재기동&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;python-개발환경-설정&quot;&gt;Python 개발환경 설정&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt; 추가 확장팩 설치
    &lt;ul&gt;
      &lt;li&gt;윈도우 시스템 내 고급시스템 설정에서 시스템 환경변수에 아래 3항목 추가
        &lt;ul&gt;
          &lt;li&gt;Python(또는 Anaconda) 설치폴더 (ex. D:\Dev\anaconda3)&lt;/li&gt;
          &lt;li&gt;Python(또는 Anaconda) 설치폴더\Library  (ex. D:\Dev\anaconda3\Library)&lt;/li&gt;
          &lt;li&gt;Python(또는 Anaconda) 설치폴더\Scripts  (ex. D:\Dev\anaconda3\Scripts)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;F5를 눌러 디버그 구성 선택 가능
        &lt;ul&gt;
          &lt;li&gt;현재 활성 Python 파일 / 모듈(‘-m’ 사용) / 프로세스 ID를 사용하여 연결 등&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Python Extenstion Pack&lt;/strong&gt; 추가 확장팩  설치
    &lt;ul&gt;
      &lt;li&gt;구문, 스니펫 및 린팅 지원&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Python Type Hint&lt;/strong&gt; 추가 확장팩 설치
    &lt;ul&gt;
      &lt;li&gt;입력모듈 완성 및 type 힌트 자동완성 지원&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Code Runner&lt;/strong&gt; 추가 확장팩 설치&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;입력모듈 완성 및 type 힌트 자동완성 지원&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Settings(Ctrl+,) 띄워 &lt;strong&gt;Code-runner: Executor Map&lt;/strong&gt; 에서 Edit in settings.json 클릭해 한글출력(utf8) 설정&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;code-runner.executorMap&quot;: {&lt;/code&gt;&lt;/p&gt;

          &lt;p&gt;​        &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;python&quot;: &quot;set PYTHONIOENCODING=utf8 &amp;amp;&amp;amp; D:\\Dev\\anaconda3\\python.exe -u&quot;,&lt;/code&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Settings(Ctrl+,) 띄워 &lt;strong&gt;Code-runner: Run In Terminal&lt;/strong&gt; 에서 코드 실행 가능하도록 선택&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;MinifyAll&lt;/strong&gt; 추가 확장팩 설치&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;JSON, CSS, Javascript, HTML, XML 등 파일크기를 줄이기 위한 일종의 경량화 지원&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interpreter 선택&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Command palette(Ctrl+Shift+p) 띄워 &lt;strong&gt;python: Select Interpreter&lt;/strong&gt; 에서 원하는 버전 선택&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Anaconda 환경설정 (Anaconda 설치하여 python 사용 시)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Settings(Ctrl+,) 띄워 &lt;strong&gt;python: conda path&lt;/strong&gt; 에서 경로 지정
        &lt;ul&gt;
          &lt;li&gt;ex. D:\Dev\anaconda3\Scripts\conda.exe&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;python 사용 터미널을 &lt;strong&gt;Command Prompt&lt;/strong&gt;로 사용!!!!&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;​&lt;/p&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hwee Joon Chung</name></author><category term="dev" /><summary type="html">일반적인 개발환경 설정</summary></entry><entry><title type="html">Git - Github - 기본</title><link href="http://localhost:4000/git-githubbasic" rel="alternate" type="text/html" title="Git - Github - 기본" /><published>2021-01-25T08:34:00+09:00</published><updated>2021-01-25T08:34:00+09:00</updated><id>http://localhost:4000/git-githubbasic</id><content type="html" xml:base="http://localhost:4000/git-githubbasic">&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;오픈소스들을 저장하여 관리할 수 있는 원격(온라인) Git 저장소&lt;/li&gt;
  &lt;li&gt;Repository라는 소스코드 저장소 생성하여 git 프로젝트 저장
    &lt;ul&gt;
      &lt;li&gt;private repository는 접근 권한이 필요하여 Github ID/Password 입력 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;remote git은 SSH와 HTTPS 지원&lt;/li&gt;
  &lt;li&gt;계정과 프로젝트 별 public key 발급 사용&lt;/li&gt;
  &lt;li&gt;Github Page란 웹호스팅 서비스 제공 (마크다운 언어 사용가능한 CMS인 Jekyll 프레임워크 지원)
    &lt;ul&gt;
      &lt;li&gt;.nojekyll 파일을 만들어 루트 디렉토리에 올리면 Jekyll 사용안함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hwee Joon Chung</name></author><category term="git" /><summary type="html">Github</summary></entry><entry><title type="html">Git - 기본</title><link href="http://localhost:4000/git-basic" rel="alternate" type="text/html" title="Git - 기본" /><published>2021-01-19T08:14:00+09:00</published><updated>2021-01-19T08:14:00+09:00</updated><id>http://localhost:4000/git-basic</id><content type="html" xml:base="http://localhost:4000/git-basic">&lt;h2 id=&quot;git&quot;&gt;Git&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;소스 코드 관리를 위한 도구인 분산형 형상관리시스템
    &lt;ul&gt;
      &lt;li&gt;리누스 토발즈가 개발&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;소스코드 이력을 남겨서 소프트웨어의 변경사항을 추적하고 관리&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;빠른 속도, 분산형 저장소 지원 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt;은 전체 기록과 각각의 세부 변경에 대한 추적 정보(metadata와 객체 DB)를 담고 있는 Git 관리 정보 폴더&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;git init 명령으로 설정&lt;/li&gt;
      &lt;li&gt;Local Repository&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;remote git은 git 원격 저장소이며 로컬 작업의 한계(저장소 용량, 공동작업 등)를 극복할 수 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로컬(오프라인 상태) 저장소로 작업 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;commit&lt;/strong&gt;이라는 명령을 통해 모든 소스코드의 상태를 기록함
    &lt;ul&gt;
      &lt;li&gt;commit하기 전 사용해야 하는 stage 단계가 따로 있는 Staging 지원&lt;/li&gt;
      &lt;li&gt;변경된 사항들은 일단 장바구니에 넣은(&lt;strong&gt;Staging&lt;/strong&gt;) 하고나서 최종 결재(&lt;strong&gt;commit&lt;/strong&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;branch&lt;/strong&gt; 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;merge&lt;/strong&gt;는 서버(온라인) 데이터를 fetch해와 로컬에서 merge하여 다시 올리면 됨&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;github, bitbucket, gitlab&lt;/strong&gt; 과 같은 git 저장소 서비스 활용가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;GUI를 활용할 수 있으나 한계가 있어 &lt;strong&gt;CLI&lt;/strong&gt; 사용하는 것이 모든 기능을 활용할 수 있고 기본임
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;sourcetree&lt;/strong&gt; 툴로 전체적인 버전관리 상황 확인 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;파일 상태 변화&lt;/strong&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;비유 : 이것저것 만들다가, 만든 것들을 저장바구니에 담아두고, 담은 것들을 최종 영구저장함)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;Modified : 파일을 수정한 상태 (git으로 어떠한 전달도 없음)&lt;/li&gt;
      &lt;li&gt;Staged : 파일을 수정한 후 그 파일을 곧 commit할 준비가 됐다고 알린 상태&lt;/li&gt;
      &lt;li&gt;Committed : 파일을 수정한 후 그 파일을 commit 해서 Local Repository에 안전하게 저장한 상태&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설치-windows-x64&quot;&gt;설치 (windows x64)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://git-scm.com/download/win 에서 설치버전이나 포터블버전을 다운로드 받음
    &lt;ul&gt;
      &lt;li&gt;git은 꼭 개발자에게 필요한 도구이므로 개인적으로 설치버전 선택.&lt;/li&gt;
      &lt;li&gt;현재 대부분의 윈도우는 64bit이므로 64bit 버전 다운로드.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;설치 진행
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Adjusting the name of the initial branch in new repositories&lt;/strong&gt; 설정 화면에서 &lt;strong&gt;Override the default branch name for new repositories&lt;/strong&gt;를 선택하고 &lt;strong&gt;main&lt;/strong&gt;을 기본 브랜치 이름으로 함
        &lt;ul&gt;
          &lt;li&gt;github에서 기본 Repository 이름이 기존 master에서 &lt;strong&gt;main&lt;/strong&gt;으로 변경되어 편의상 설정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;(&lt;strong&gt;옵션사항&lt;/strong&gt;) &lt;strong&gt;Choosing the default editor used by Git&lt;/strong&gt; 설정 화면에서 &lt;strong&gt;Use Visual Studio Code as Git’s default editor&lt;/strong&gt; 로 선택 가능&lt;/li&gt;
      &lt;li&gt;그 외 다양한 옵션들 있는데 그냥 기본값으로 진행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;설치 후 탐색기에서 오른쪽 마우스 클릭 시 &lt;strong&gt;git bash here&lt;/strong&gt; 메뉴 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;환경설정&quot;&gt;환경설정&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Windows의 환경설정 파일들 (우선순위순)
    &lt;ul&gt;
      &lt;li&gt;.git/config
        &lt;ul&gt;
          &lt;li&gt;(git init명령을 실행했다면) 해당 Local Repository에만 적용되는 설정으로 Git Directory안에 위치&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;$USER_HOME/.gitconfig
        &lt;ul&gt;
          &lt;li&gt;윈도우사용자별로 적용되는 설정&lt;/li&gt;
          &lt;li&gt;git config –global&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;$GIT_HMOE/mingw64/etc/gitconfig
        &lt;ul&gt;
          &lt;li&gt;윈도우시스템 모든 사용자/저장소에 적용되는 설정&lt;/li&gt;
          &lt;li&gt;git config –system&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;git bash 실행하여 git config로 기본 환경설정
    &lt;ul&gt;
      &lt;li&gt;git config –global user.name “HweeJoon-Chung”&lt;/li&gt;
      &lt;li&gt;git config –global user.email “hweejoonchung@gmail.com”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;사용방법&quot;&gt;사용방법&lt;/h2&gt;

&lt;h3 id=&quot;local-repository-생성&quot;&gt;Local Repository 생성&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;새로운 git 프로젝트를 만들 때 사용&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;원하는 위치에 프로젝트 폴더를 생성&lt;/li&gt;
  &lt;li&gt;git bash 상에서 해당 폴더로 이동해 git init 명령 실행 (Local Repository .git/ 생성)&lt;/li&gt;
  &lt;li&gt;해당 폴더에서 소스코드파일을 만듦 (ex. test.c)
    &lt;ul&gt;
      &lt;li&gt;git status 명령 실행하면 untracked 파일로 test.c이 있다(변경사항이 있다)고 나옴 (Modified)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;git add test.c 명령 실행하여 test.c 파일이란 변경사항을 관리할 준비가 되었다고 알림
    &lt;ul&gt;
      &lt;li&gt;git status 명령 실행하면 commit할 변경들이 있다고 나옴 (Staged)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;git commit -m “test.c commit” 명령 실행하여 최종 변경을 git에 저장함 (Committed)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;remote-reposity-활용-github&quot;&gt;Remote Reposity 활용 (Github)&lt;/h3&gt;

&lt;h4 id=&quot;새-프로젝트-시작&quot;&gt;새 프로젝트 시작&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Github에 프로젝트 Repository를 생성&lt;/li&gt;
  &lt;li&gt;Local Repository 내 개발 환경설정/개발사항 저장&lt;/li&gt;
  &lt;li&gt;Local Repository와 Github의 Repository를 remote 연결&lt;/li&gt;
  &lt;li&gt;Local Repository 저장상황을 Remote Repository에 push&lt;/li&gt;
  &lt;li&gt;(공동작업시) 해당 Remote Repository를 clone
    &lt;ul&gt;
      &lt;li&gt;(공동작업자) clone을 통해 로컬로 복사한 프로젝트로 작업 진행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;기존-프로젝트-수정&quot;&gt;기존 프로젝트 수정&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;기존 Local Repository에 존재&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Github Repository와 remote -v명령으로 연결 확인
    &lt;ol&gt;
      &lt;li&gt;연결안되어 있으면 다시 remote 연결&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Github Repository 수정사항들을 Local Repository로 fetch 또는 pull함
    &lt;ul&gt;
      &lt;li&gt;fetch : Github의 commit들을 Local Repository로 가져옴
        &lt;ul&gt;
          &lt;li&gt;개발자가 자신의 작업과 적절히 merge하여 다시 push해야 함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;pull : Github의 commit들을 가져오면서 자동으로 Local Repository와 병합
        &lt;ul&gt;
          &lt;li&gt;편하지만 conflict 발생 확인 어려움&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;local로-github-branch-가져오기&quot;&gt;Local로 Github Branch 가져오기&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;git pull으로 가져오지 못함 (Local에 없다면)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;git remote에 대한 업데이트 실행
    &lt;ul&gt;
      &lt;li&gt;git remote update&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Github Repository의 branch 내역 확인
    &lt;ul&gt;
      &lt;li&gt;git branch -r     : remote branch 내역&lt;/li&gt;
      &lt;li&gt;git branch -a     : local/remote branch 내역&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원하는 branch를 Local로 가져와서 해당 branch 사용
    &lt;ul&gt;
      &lt;li&gt;git checkout -t  &lt;Local Branch=&quot;&quot; Name=&quot;&quot;&gt;  &quot;Remote Branch Name&quot;
&lt;/Local&gt;        &lt;ul&gt;
          &lt;li&gt;Local Branch Name 생략가능하나 Remote와 다르게 하고 싶다면 적어도 됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;git-remote-관련-명령&quot;&gt;Git Remote 관련 명령&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;git remote add “사용할 원격저장소이름” “Github Repository URL”&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;ex. git remote add origin https://github.com/HweeJoon-Chung/RemoteProject.git&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git remote -v&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git push “원격저장소이름” “local branch명”&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;ex.   git push origin main&lt;/p&gt;

        &lt;p&gt;​	git push origin –all (모든 branch)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git fetch “원격저장소이름”&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;ex. git fetch origin&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git pull&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git clone “Github Repository URL”&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;ex. git clone https://github.com/HweeJoon-Chung/RemoteProject.git&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hwee Joon Chung</name></author><category term="git" /><summary type="html">Git</summary></entry><entry><title type="html">Git - Github - ruby 기본</title><link href="http://localhost:4000/git-github-rubybasic" rel="alternate" type="text/html" title="Git - Github - ruby 기본" /><published>2021-01-08T08:47:00+09:00</published><updated>2021-01-08T08:47:00+09:00</updated><id>http://localhost:4000/git-github-rubybasic</id><content type="html" xml:base="http://localhost:4000/git-github-rubybasic">&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1995년 발표된 객체 지향 프로그래밍 언어
    &lt;ul&gt;
      &lt;li&gt;일본인 마츠모토 유키히로(보통 Matz라 불림)가 만듦&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인터프리터를 쓰는 스크립트 언어 (Perl, Python 영향 큼)
    &lt;ul&gt;
      &lt;li&gt;호환성 부족 - 버전 별 호환이 안되는 경우 많음&lt;/li&gt;
      &lt;li&gt;Rubi on Rails(Full stack Web Framework) 나오면서 인기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gem(패키지 관리자)으로 다양한 패키지들을 설치 (c.f. python의 pip)&lt;/li&gt;
  &lt;li&gt;bundler(gem 패키지 중 하나)로 Gemfile에 기술된 패키지들을 설치(install)하거나 실행
    &lt;ul&gt;
      &lt;li&gt;Gemfile.lock에는 bundler가 설치한 모든 Gem 패키지 버전 기술&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;참고. Github가 Ruby로 개발된 대표적인 사이트 (Github Pages는 Jekyll 지원)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;설치-windows-x64환경&quot;&gt;설치 (Windows x64환경)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;윈도우 계정이름을 영문으로 설정해야 관련 문제 없음
    &lt;ul&gt;
      &lt;li&gt;윈도우키+R 눌러 Control입력 후 실행하여 제어판 엶&lt;/li&gt;
      &lt;li&gt;계정 항목의 계정권한변경 클릭하여 변경 원하는 계정이름으로 변경
        &lt;ul&gt;
          &lt;li&gt;이 때 계정이름 변경 항목이 안보이면 계정관리로 들어가 브라우저상에서 변경&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;https://rubyinstaller.org/downloads/ 에서 ruby with Devkit 안정버전 다운로드&lt;/li&gt;
  &lt;li&gt;Ruby 및 Devkit 설치
    &lt;ul&gt;
      &lt;li&gt;기본 설정으로 설치완료 후 마지막에 [1-3] 선택 시 1 입력하여 MSYS2 기본 설치
        &lt;ul&gt;
          &lt;li&gt;추후 필요하면 나머지 [2-3] 추가 설치 (MSYS2 system update 및 MINGW 개발툴체인)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;bundler 설치
    &lt;ul&gt;
      &lt;li&gt;패키지 설치 시 필요한 툴&lt;/li&gt;
      &lt;li&gt;cmd창을 띄워 gem install bundler 입력&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; gem install bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;주의&quot;&gt;&lt;strong&gt;주의&lt;/strong&gt;&lt;/h3&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;윈도우 계정이름을 영문으로&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Ruby 설치 과정 마지막 [1-3] 선택 시 1 입력&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Ruby 설치 후 cmd창에서 bundler 설치 (gem 패키지들을 의존성 확인하여 안전하게 설치 위해)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hwee Joon Chung</name></author><category term="git" /><summary type="html">Ruby</summary></entry></feed>